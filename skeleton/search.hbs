<script type="text/javascript" src="/assets/js/handlebars.runtime.min.js"></script>
<script type="text/javascript" src="/assets/js/didyoumean.js"></script>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function() {
    {{{handlebarsHelpers}}}
    var tpl = Handlebars.template({{{precompiledSearchResultsTemplate}}});
    var $search = document.getElementById('search');

    if ($search !== null) { new Search(tpl, $search).search(); }

    function Search(tpl, $search) {
        function search() {
            new Promise(function(resolve) {
                // get literal query string
                var q = _getQ();

                if (q !== '') {
                    _setSearchInputs(q);

                    // load search index with AJAX
                    var xhr = new XMLHttpRequest();
                    xhr.open('GET', '/search.json');

                    xhr.onreadystatechange = function() {
                        // DONE
                        if (xhr.readyState === 4) {
                            // OK
                            if (xhr.status === 200) {
                                // parse search index
                                var index = _parseIndex(xhr);

                                if (index !== null) {
                                    // parse query string
                                    // test with:
                                    // foo "bar" +baz +"qux" -waldo -"thud" + corge" - +"grault -"xyzzy +1234 -1234
                                    var parsedQ = _parseQ(q);

                                    // get hits for all terms
                                    var hits = _getHits(parsedQ, index);

                                    // calculate results
                                    resolve({ result: [], q: q });
                                } else { resolve({ result: [], q: q }); }
                            } else { resolve({ result: [], q: q }); }
                        }
                    };

                    xhr.send(null);
                } else { resolve({ result: [], q: q }); }
            }).then(function(results) {
                // show results with precompiled Handlebars template
                $search.innerHTML = tpl(results);
            });
        }

        function _getHits(parsedQ, index) {
            var terms = Object.keys(index.t);

            return Object.keys(parsedQ).reduce(function(hits, key) {
                var tmp = {};

                tmp[key] = parsedQ[key].reduce(function(hits2, data) {
                    return hits2.concat(
                        (
                            data.fuzzy === true
                                ? didYouMean.default(data.term, terms, {
                                    returnType: didYouMean.ReturnTypeEnums.ALL_CLOSEST_MATCHES
                                })
                                : terms.filter(function(term) { return term.indexOf(data.term) !== -1; })
                        ).map(function(term) { return index.t[term]; })
                    );
                }, []);

                return Object.assign({}, hits, tmp);
            }, {});
        }

        function _getQ() {
            var q = '';

            // check whether search term is in the URL
            if (typeof URLSearchParams !== 'undefined') {
                q = new URLSearchParams(location.search.slice(1)).get('q').trim().toLowerCase();
            }

            return q;
        }

        function _parseIndex(xhr) {
            var index = null;

            try { index = JSON.parse(xhr.responseText); } catch(ex) {}

            return index;
        }

        function _parseQ(q) {
            var already = {};

            return q.split(/\s+/g).reduce(function(parsedQ, term) {
                var key = 'or';
                var fuzzy = true;
                var tmp = {};

                if (term.slice(0, 1) === '+') {
                    key = 'and';
                    term = term.slice(1);
                }
                else if (term.slice(0, 1) === '-') {
                    key = 'not';
                    term = term.slice(1);
                }

                if (term.slice(0, 1) === '"' && term.slice(-1) === '"') {
                    fuzzy = false;
                    term = term.slice(1, -1);
                }

                if (!(term in already) && /^[a-z]+$/.test(term)) {
                    already[term] = true;

                    tmp[key] = parsedQ[key].concat({ fuzzy: fuzzy, term: term });

                    return Object.assign({}, parsedQ, tmp);
                }

                return parsedQ;
            }, { and: [], not: [], or: [] });
        }

        function _setSearchInputs(q) {
            // set search forms in the rest of the DOM to the query string
            var $qs = document.querySelectorAll('.search-form__q');

            if ($qs !== null) { Array.from($qs).forEach(function($q) { $q.value = q; }); }
        }

        return { search };
    }
});
</script>
<div class="search-results" id="search"></div>
